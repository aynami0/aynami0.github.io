<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/05/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot基础</title>
    <url>/2023/05/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标:"></a>学习目标:</h2><h2 id="1-能够理解Spring的优缺点2-能够理解SpringBoot的特点3-能够理解SpringBoot的核心功能4-能够搭建SpringBoot的环境5-能够完成application-properties配置文件的配置6-能够完成application-yml配置文件的配置7-能够使用SpringBoot集成Mybatis8-能够使用SpringBoot集成Junit9-能够使用SpringBoot集成SpringData-JPA"><a href="#1-能够理解Spring的优缺点2-能够理解SpringBoot的特点3-能够理解SpringBoot的核心功能4-能够搭建SpringBoot的环境5-能够完成application-properties配置文件的配置6-能够完成application-yml配置文件的配置7-能够使用SpringBoot集成Mybatis8-能够使用SpringBoot集成Junit9-能够使用SpringBoot集成SpringData-JPA" class="headerlink" title="1.能够理解Spring的优缺点2.能够理解SpringBoot的特点3.能够理解SpringBoot的核心功能4.能够搭建SpringBoot的环境5.能够完成application.properties配置文件的配置6.能够完成application.yml配置文件的配置7.能够使用SpringBoot集成Mybatis8.能够使用SpringBoot集成Junit9.能够使用SpringBoot集成SpringData JPA"></a>1.能够理解Spring的优缺点<br>2.能够理解SpringBoot的特点<br>3.能够理解SpringBoot的核心功能<span id="more"></span><br>4.能够搭建SpringBoot的环境<br>5.能够完成application.properties配置文件的配置<br>6.能够完成application.yml配置文件的配置<br>7.能够使用SpringBoot集成Mybatis<br>8.能够使用SpringBoot集成Junit<br>9.能够使用SpringBoot集成SpringData JPA</h2><h1 id="一、SpringBoot简介"><a href="#一、SpringBoot简介" class="headerlink" title="一、SpringBoot简介"></a>一、SpringBoot简介</h1><h2 id="1-1-原有Spring优缺点分析"><a href="#1-1-原有Spring优缺点分析" class="headerlink" title="1.1 原有Spring优缺点分析"></a>1.1 原有Spring优缺点分析</h2><h3 id="1-1-1-Spring的优点分析"><a href="#1-1-1-Spring的优点分析" class="headerlink" title="1.1.1 Spring的优点分析"></a>1.1.1 Spring的优点分析</h3><h2 id="Spring是Java企业版（Java-Enterprise-Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise-JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain-Old-Java-Object，POJO）实现了EJB的功能。"><a href="#Spring是Java企业版（Java-Enterprise-Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise-JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain-Old-Java-Object，POJO）实现了EJB的功能。" class="headerlink" title="Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。"></a>Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。</h2><h3 id="1-1-2-Spring的缺点分析"><a href="#1-1-2-Spring的缺点分析" class="headerlink" title="1.1.2 Spring的缺点分析"></a>1.1.2 Spring的缺点分析</h3><h2 id="虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring-2-5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring-3-0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。"><a href="#虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring-2-5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring-3-0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。" class="headerlink" title="虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。"></a>虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。<br>所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。<br>除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。</h2><h2 id="1-2-SpringBoot的概述"><a href="#1-2-SpringBoot的概述" class="headerlink" title="1.2 SpringBoot的概述"></a>1.2 SpringBoot的概述</h2><h3 id="1-2-1-SpringBoot解决上述Spring的缺点"><a href="#1-2-1-SpringBoot解决上述Spring的缺点" class="headerlink" title="1.2.1 SpringBoot解决上述Spring的缺点"></a>1.2.1 SpringBoot解决上述Spring的缺点</h3><h2 id="SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。"><a href="#SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。" class="headerlink" title="SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。"></a>SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。</h2><h3 id="1-2-2-SpringBoot的特点"><a href="#1-2-2-SpringBoot的特点" class="headerlink" title="1.2.2 SpringBoot的特点"></a>1.2.2 SpringBoot的特点</h3><h2 id="1-为基于Spring的开发提供更快的入门体验2-开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求3-提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等4-SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式"><a href="#1-为基于Spring的开发提供更快的入门体验2-开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求3-提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等4-SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式" class="headerlink" title="1.为基于Spring的开发提供更快的入门体验2.开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求3.提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等4.SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式"></a>1.为基于Spring的开发提供更快的入门体验<br>2.开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求<br>3.提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等<br>4.SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式</h2><h3 id="1-2-3-SpringBoot的核心功能"><a href="#1-2-3-SpringBoot的核心功能" class="headerlink" title="1.2.3 SpringBoot的核心功能"></a>1.2.3 SpringBoot的核心功能</h3><h2 id="1-起步依赖起步依赖本质上是一个Maven项目对象模型（Project-Object-Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。2-自动配置Spring-Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。"><a href="#1-起步依赖起步依赖本质上是一个Maven项目对象模型（Project-Object-Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。2-自动配置Spring-Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。" class="headerlink" title="1.起步依赖起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。2.自动配置Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。"></a>1.起步依赖<br>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。<br>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。<br>2.自动配置<br>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。</h2><h1 id="SpringBoot快速入门"><a href="#SpringBoot快速入门" class="headerlink" title="SpringBoot快速入门"></a>SpringBoot快速入门</h1><h2 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h2><h3 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h3><h2 id="使用idea工具创建一个maven工程，该工程为普通的java工程即可-2-1-2-添加SpringBoot的起步依赖SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parentSpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖"><a href="#使用idea工具创建一个maven工程，该工程为普通的java工程即可-2-1-2-添加SpringBoot的起步依赖SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parentSpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖" class="headerlink" title="使用idea工具创建一个maven工程，该工程为普通的java工程即可### 2.1.2 添加SpringBoot的起步依赖SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parentSpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖"></a>使用idea工具创建一个maven工程，该工程为普通的java工程即可<br>### 2.1.2 添加SpringBoot的起步依赖<br>SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parent<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><br>SpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></h2><h3 id="2-1-3-编写SpringBoot引导类"><a href="#2-1-3-编写SpringBoot引导类" class="headerlink" title="2.1.3 编写SpringBoot引导类"></a>2.1.3 编写SpringBoot引导类</h3><h2 id="要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问"><a href="#要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问" class="headerlink" title="要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问"></a>要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySpringBootApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MySpringBootApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="2-1-4-编写Controller"><a href="#2-1-4-编写Controller" class="headerlink" title="2.1.4 编写Controller"></a>2.1.4 编写Controller</h3><h2 id="在引导类MySpringBootApplication同级包或者子级包中创建QuickStartController"><a href="#在引导类MySpringBootApplication同级包或者子级包中创建QuickStartController" class="headerlink" title="在引导类MySpringBootApplication同级包或者子级包中创建QuickStartController"></a>在引导类MySpringBootApplication同级包或者子级包中创建QuickStartController<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickStartController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">quick</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot 访问成功!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="2-1-5-测试"><a href="#2-1-5-测试" class="headerlink" title="2.1.5 测试"></a>2.1.5 测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.1.RELEASE)</span><br><span class="line"></span><br><span class="line">2018-05-08 14:29:59.714  INFO 5672 --- [           main] com.itheima.MySpringBootApplication      : Starting MySpringBootApplication on DESKTOP-RRUNFUH with PID 5672 (C:\Users\muzimoo\IdeaProjects\IdeaTest\springboot_quick\target\classes started by muzimoo in C:\Users\muzimoo\IdeaProjects\IdeaTest)</span><br><span class="line">... ... ...</span><br><span class="line">o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-05-08 14:30:03.126  INFO 5672 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2018-05-08 14:30:03.196  INFO 5672 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;</span><br><span class="line">2018-05-08 14:30:03.206  INFO 5672 --- [           main] com.itheima.MySpringBootApplication      : Started MySpringBootApplication in 4.252 seconds (JVM running for 5.583)</span><br></pre></td></tr></table></figure>
<p>通过日志发现，Tomcat started on port(s): 8080 (http) with context path ‘’<br>tomcat已经起步，端口监听8080，web应用的虚拟工程名称为空<br>打开浏览器访问url地址为：<a href="http://localhost:8080/quick">http://localhost:8080/quick</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习之JavaWeb篇</title>
    <url>/2023/05/19/java%E5%AD%A6%E4%B9%A0%E4%B9%8Bweb%E7%AF%87/</url>
    <content><![CDATA[<h1 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h1><h2 id="web开发web，网页的意思，www-baidu-com静态web-1-html，css2-提供给所有人看的数据，始终不会变化！动态web-1-淘宝，几乎是所有的网站；-千人千面-2-提供给所有人看的数据，始终会变化，每个人在不同的时间，地点看到的信息各不相同。3-技术栈：ServLet-x2F-JSP，ASP，PHP"><a href="#web开发web，网页的意思，www-baidu-com静态web-1-html，css2-提供给所有人看的数据，始终不会变化！动态web-1-淘宝，几乎是所有的网站；-千人千面-2-提供给所有人看的数据，始终会变化，每个人在不同的时间，地点看到的信息各不相同。3-技术栈：ServLet-x2F-JSP，ASP，PHP" class="headerlink" title="web开发web，网页的意思，www.baidu.com静态web:1.html，css2.提供给所有人看的数据，始终不会变化！动态web:1.淘宝，几乎是所有的网站；(千人千面)2.提供给所有人看的数据，始终会变化，每个人在不同的时间，地点看到的信息各不相同。3.技术栈：ServLet&#x2F;JSP，ASP，PHP"></a>web开发<br>web，网页的意思，<a href="http://www.baidu.com/">www.baidu.com</a><br>静态web:<br>1.html，css<br>2.提供给所有人看的数据，始终不会变化！<span id="more"></span><br>动态web:<br>1.淘宝，几乎是所有的网站；(千人千面)<br>2.提供给所有人看的数据，始终会变化，每个人在不同的时间，地点看到的信息各不相同。<br>3.技术栈：ServLet&#x2F;JSP，ASP，PHP</h2><h2 id="1-2、Web-应用程序"><a href="#1-2、Web-应用程序" class="headerlink" title="1.2、Web 应用程序"></a>1.2、Web 应用程序</h2><h2 id="什么是程序-Web-应用程序：可以提供浏览器访问的程序；（提供DOS命令访问的程序，CS架构。😖）a-html、b-html…多个web资源，这些资源可以被外界访问，对外界提供服务。在互联网上能够访问到的任何一个页面或者资源，都存在于世界的某一个角落的计算机上。资源是真实存在的，URL-统一资源定位符-，网络世界的通讯地址。URL，这些统一的web资源会被放在同一个文件夹下，通过-web-应用程序，（Tomcat服务器）来提供。一个web应用程序由多部分组成：（静态web，动态web）html，css，jsjsp，servletjava程序jar包配置文件（Properties）web应用程序编写完毕之后，若想提供给外界访问：需要一个服务器来统一管理，🧐思：站在旁观者角度，有一堆资源，放在了一台电脑上，电脑上安装了一个服务器（Tomcat），来统一管理，为了与来访者交互，服务器设置了一些应用程序，针对不同来访者，采取不同方式响应。来访者看似只是鼠标的点击行为，实质是通过URL来访问应用程序，变相的访问一堆文件夹路径。（和你访问自家电脑的文件类似），通过域名解析IP地址，找到真实的电脑，通过web应用程序，类似资源管理器，访问文件夹的路径，找到文件所在，访问文件，（html，css，js，jsp，图片，视频，等等）。"><a href="#什么是程序-Web-应用程序：可以提供浏览器访问的程序；（提供DOS命令访问的程序，CS架构。😖）a-html、b-html…多个web资源，这些资源可以被外界访问，对外界提供服务。在互联网上能够访问到的任何一个页面或者资源，都存在于世界的某一个角落的计算机上。资源是真实存在的，URL-统一资源定位符-，网络世界的通讯地址。URL，这些统一的web资源会被放在同一个文件夹下，通过-web-应用程序，（Tomcat服务器）来提供。一个web应用程序由多部分组成：（静态web，动态web）html，css，jsjsp，servletjava程序jar包配置文件（Properties）web应用程序编写完毕之后，若想提供给外界访问：需要一个服务器来统一管理，🧐思：站在旁观者角度，有一堆资源，放在了一台电脑上，电脑上安装了一个服务器（Tomcat），来统一管理，为了与来访者交互，服务器设置了一些应用程序，针对不同来访者，采取不同方式响应。来访者看似只是鼠标的点击行为，实质是通过URL来访问应用程序，变相的访问一堆文件夹路径。（和你访问自家电脑的文件类似），通过域名解析IP地址，找到真实的电脑，通过web应用程序，类似资源管理器，访问文件夹的路径，找到文件所在，访问文件，（html，css，js，jsp，图片，视频，等等）。" class="headerlink" title="什么是程序?Web 应用程序：可以提供浏览器访问的程序；（提供DOS命令访问的程序，CS架构。😖）a.html、b.html…多个web资源，这些资源可以被外界访问，对外界提供服务。在互联网上能够访问到的任何一个页面或者资源，都存在于世界的某一个角落的计算机上。资源是真实存在的，URL(统一资源定位符)，网络世界的通讯地址。URL，这些统一的web资源会被放在同一个文件夹下，通过 web 应用程序，（Tomcat服务器）来提供。一个web应用程序由多部分组成：（静态web，动态web）html，css，jsjsp，servletjava程序jar包配置文件（Properties）web应用程序编写完毕之后，若想提供给外界访问：需要一个服务器来统一管理，🧐思：站在旁观者角度，有一堆资源，放在了一台电脑上，电脑上安装了一个服务器（Tomcat），来统一管理，为了与来访者交互，服务器设置了一些应用程序，针对不同来访者，采取不同方式响应。来访者看似只是鼠标的点击行为，实质是通过URL来访问应用程序，变相的访问一堆文件夹路径。（和你访问自家电脑的文件类似），通过域名解析IP地址，找到真实的电脑，通过web应用程序，类似资源管理器，访问文件夹的路径，找到文件所在，访问文件，（html，css，js，jsp，图片，视频，等等）。"></a>什么是程序?<br>Web 应用程序：可以提供浏览器访问的程序；（提供DOS命令访问的程序，CS架构。😖）<br>a.html、b.html…多个web资源，这些资源可以被外界访问，对外界提供服务。<br>在互联网上能够访问到的任何一个页面或者资源，都存在于世界的某一个角落的计算机上。<br>资源是真实存在的，URL(统一资源定位符)，网络世界的通讯地址。<br>URL，这些统一的web资源会被放在同一个文件夹下，<br>通过 web 应用程序，（Tomcat服务器）来提供。<br>一个web应用程序由多部分组成：（静态web，动态web）<br>html，css，js<br>jsp，servlet<br>java程序<br>jar包<br>配置文件（Properties）<br>web应用程序编写完毕之后，若想提供给外界访问：需要一个服务器来统一管理，<br>🧐思：<br>站在旁观者角度，有一堆资源，放在了一台电脑上，电脑上安装了一个服务器（Tomcat），来统一管理，为了与来访者交互，服务器设置了一些应用程序，针对不同来访者，采取不同方式响应。来访者看似只是鼠标的点击行为，实质是通过URL来访问应用程序，变相的访问一堆文件夹路径。（和你访问自家电脑的文件类似），通过域名解析IP地址，找到真实的电脑，通过web应用程序，类似资源管理器，访问文件夹的路径，找到文件所在，访问文件，（html，css，js，jsp，图片，视频，等等）。</h2><h2 id="静态web"><a href="#静态web" class="headerlink" title="静态web"></a>静态web</h2><h2 id="htm、-html，这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。网络：静态web的缺点：web页面无法动态更新，所有用户看到的都是同一个页面1-轮播图，点击特效：伪动态2-JavaScript-实际开发中，用的最多-3-VBScript它无法和数据库交互（数据无法持久化，无法交互）"><a href="#htm、-html，这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。网络：静态web的缺点：web页面无法动态更新，所有用户看到的都是同一个页面1-轮播图，点击特效：伪动态2-JavaScript-实际开发中，用的最多-3-VBScript它无法和数据库交互（数据无法持久化，无法交互）" class="headerlink" title=".htm、.html，这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。网络：静态web的缺点：web页面无法动态更新，所有用户看到的都是同一个页面1.轮播图，点击特效：伪动态2.JavaScript (实际开发中，用的最多)3.VBScript它无法和数据库交互（数据无法持久化，无法交互）"></a><em>.htm、</em>.html，这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。网络：<br><img data-src="/images/1.jpg" alt="图片"><br>静态web的缺点：<br>web页面无法动态更新，所有用户看到的都是同一个页面<br>1.轮播图，点击特效：伪动态<br>2.JavaScript (实际开发中，用的最多)<br>3.VBScript<br>它无法和数据库交互（数据无法持久化，无法交互）</h2><h2 id="动态web"><a href="#动态web" class="headerlink" title="动态web"></a>动态web</h2><h2 id="页面会动态展示：“web页面展示的效果因人而异“；缺点：1-服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布；2-停机维护优点：1-web页面可以动态更新，所有用户看到的都不是同一个页面2-它可以和数据库交互（数据持久化：注册，个人信息）3-架构师更牛逼"><a href="#页面会动态展示：“web页面展示的效果因人而异“；缺点：1-服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布；2-停机维护优点：1-web页面可以动态更新，所有用户看到的都不是同一个页面2-它可以和数据库交互（数据持久化：注册，个人信息）3-架构师更牛逼" class="headerlink" title="页面会动态展示：“web页面展示的效果因人而异“；缺点：1.服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布；2.停机维护优点：1.web页面可以动态更新，所有用户看到的都不是同一个页面2.它可以和数据库交互（数据持久化：注册，个人信息）3.架构师更牛逼"></a>页面会动态展示：“web页面展示的效果因人而异“；<br><img data-src="/images/2.jpg" alt="图片"><br>缺点：<br>1.服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布；<br>2.停机维护<br>优点：<br>1.web页面可以动态更新，所有用户看到的都不是同一个页面<br>2.它可以和数据库交互（数据持久化：注册，个人信息）<br>3.架构师更牛逼</h2><h1 id="2、Web服务器"><a href="#2、Web服务器" class="headerlink" title="2、Web服务器"></a>2、Web服务器</h1><h2 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h2><p>ASP，</p>
<p>微软：国内最早流行的就是ASP；<br>在HTML中嵌入了VB的脚本，ASP+COM；<br>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其混乱。<br>维护成本高！<br>C#<br>IIS服务器<br><img data-src="/images/3.jpg" alt="图片"><br>PHP</p>
<p>开发速度快，功能很强大，跨平台，代码很简单（）<br>无法承载大访问量的情况（局限性）<br>JSP&#x2F;Servlet：</p>
<h2 id="B-x2F-S：浏览器和服务器C-x2F-S：客户端和服务器sun公司主推的B-x2F-S架构基于Java语言的（所有大公司，或者一些开源的组件，都是用java写的）可以承载三高问题带来的影响；（高并发，高可用，高性能）语法像ASP，ASP–-gt-JSP，加强市场强度；"><a href="#B-x2F-S：浏览器和服务器C-x2F-S：客户端和服务器sun公司主推的B-x2F-S架构基于Java语言的（所有大公司，或者一些开源的组件，都是用java写的）可以承载三高问题带来的影响；（高并发，高可用，高性能）语法像ASP，ASP–-gt-JSP，加强市场强度；" class="headerlink" title="B&#x2F;S：浏览器和服务器C&#x2F;S：客户端和服务器sun公司主推的B&#x2F;S架构基于Java语言的（所有大公司，或者一些开源的组件，都是用java写的）可以承载三高问题带来的影响；（高并发，高可用，高性能）语法像ASP，ASP–&gt;JSP，加强市场强度；"></a>B&#x2F;S：浏览器和服务器<br>C&#x2F;S：客户端和服务器<br>sun公司主推的B&#x2F;S架构<br>基于Java语言的（所有大公司，或者一些开源的组件，都是用java写的）<br>可以承载三高问题带来的影响；（高并发，高可用，高性能）<br>语法像ASP，ASP–&gt;JSP，加强市场强度；</h2><h2 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h2><p>服务器是一种被动操作，用来处理用户的一些请求和给用户一些响应信息；<br>IIS<br>微软的，ASP…</p>
<p>Tomcat<br>面向百度编程：<br>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。<br>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学Web者来说，它是最佳的选择。<br>诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。</p>
<p>下载Tomcat：<br>1.安装或者解压<br>2.了解配置文件及目录结构<br>3.这个东西的作用<br>目录结构：(反射和多线程所学)</p>
<h2 id="jdk和jre的区别：一个-java，一个-class"><a href="#jdk和jre的区别：一个-java，一个-class" class="headerlink" title="jdk和jre的区别：一个.java，一个.class"></a>jdk和jre的区别：一个.java，一个.class<br><img data-src="/images/4.jpg" alt="图片"></h2><h1 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h1><h2 id="3-1、安装Tomcat"><a href="#3-1、安装Tomcat" class="headerlink" title="3.1、安装Tomcat"></a>3.1、安装Tomcat</h2><h2 id="Tomcat官网：http-tomcat-apache-org-采用了Tomcat-9-的版本"><a href="#Tomcat官网：http-tomcat-apache-org-采用了Tomcat-9-的版本" class="headerlink" title="Tomcat官网：http://tomcat.apache.org/采用了Tomcat 9 的版本"></a>Tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a><br>采用了Tomcat 9 的版本<br><img data-src="/images/5.jpg" alt="图片"><br><img data-src="/images/6.jpg" alt="图片"></h2><h2 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h2><p><img data-src="/images/7.jpg" alt="图片"><br>启动和关闭Tomcat<br><img data-src="/images/8.jpg" alt="图片"><br>Tomcat界面<br><img data-src="/images/9.jpg" alt="图片"><br>启动测试：<a href="http://localhost:8080/">http://localhost:8080/</a><br><img data-src="/images/10.jpg" alt="图片"><br>启动测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>可能遇到的问题：<br>1.Java环境变量没有配置（可能会闪退）<br>2.闪退问题：需要配置兼容性<br>3.乱码问题：配置文件中设置<br>一个文件夹代表一个web应用</p>
<h2 id="jsp就是在HTML里面嵌入一些java代码乱码问题：服务器核心配置文件"><a href="#jsp就是在HTML里面嵌入一些java代码乱码问题：服务器核心配置文件" class="headerlink" title="jsp就是在HTML里面嵌入一些java代码乱码问题：服务器核心配置文件"></a>jsp就是在HTML里面嵌入一些java代码<br>乱码问题：<br><img data-src="/images/11.jpg" alt="图片"><br>服务器核心配置文件<br><img data-src="/images/12.jpg" alt="图片"></h2><h3 id="3-2-1、修改访问页面"><a href="#3-2-1、修改访问页面" class="headerlink" title="3.2.1、修改访问页面"></a>3.2.1、修改访问页面</h3><h2 id="修改D-Java-apache-tomcat-9-0-37-webapps-ROOT下的index-jsp，修改之后刷新即可，不需要重启服务器"><a href="#修改D-Java-apache-tomcat-9-0-37-webapps-ROOT下的index-jsp，修改之后刷新即可，不需要重启服务器" class="headerlink" title="修改D:\Java\apache-tomcat-9.0.37\webapps\ROOT下的index.jsp，修改之后刷新即可，不需要重启服务器"></a>修改D:\Java\apache-tomcat-9.0.37\webapps\ROOT下的index.jsp，修改之后刷新即可，不需要重启服务器<br><img data-src="/images/13.jpg" alt="图片"><br><img data-src="/images/14.jpg" alt="图片"></h2><h3 id="3-2-2、修改访问端口号"><a href="#3-2-2、修改访问端口号" class="headerlink" title="3.2.2、修改访问端口号"></a>3.2.2、修改访问端口号</h3><h2 id="修改D-Java-apache-tomcat-9-0-37-conf下的server-xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。"><a href="#修改D-Java-apache-tomcat-9-0-37-conf下的server-xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。" class="headerlink" title="修改D:\Java\apache-tomcat-9.0.37\conf下的server.xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。"></a>修改D:\Java\apache-tomcat-9.0.37\conf下的server.xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。<br><img data-src="/images/15.jpg" alt="图片"><br><img data-src="/images/16.jpg" alt="图片"></h2><h3 id="3-2-3、修改域名"><a href="#3-2-3、修改域名" class="headerlink" title="3.2.3、修改域名"></a>3.2.3、修改域名</h3><h2 id="修改D-Java-apache-tomcat-9-0-37-conf下的server-xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。不要修改引擎里面的哦，修改标签中的，修改之后还可以访问到吗？修改C-Windows-System32-drivers-etc下的hosts文件，更改了服务器的配置文件，必须重启服务器，否则无法生效。Windows底层文件被修改，提示权限不够，采用管理员模式启动。"><a href="#修改D-Java-apache-tomcat-9-0-37-conf下的server-xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。不要修改引擎里面的哦，修改标签中的，修改之后还可以访问到吗？修改C-Windows-System32-drivers-etc下的hosts文件，更改了服务器的配置文件，必须重启服务器，否则无法生效。Windows底层文件被修改，提示权限不够，采用管理员模式启动。" class="headerlink" title="修改D:\Java\apache-tomcat-9.0.37\conf下的server.xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。不要修改引擎里面的哦，修改标签中的，修改之后还可以访问到吗？修改C:\Windows\System32\drivers\etc下的hosts文件，更改了服务器的配置文件，必须重启服务器，否则无法生效。Windows底层文件被修改，提示权限不够，采用管理员模式启动。"></a>修改D:\Java\apache-tomcat-9.0.37\conf下的server.xml，更改了服务器的配置文件，必须重启服务器，否则无法生效。<br>不要修改引擎里面的哦，修改<Host>标签中的，修改之后还可以访问到吗？<br><img data-src="/images/17.jpg" alt="图片"><br><img data-src="/images/18.jpg" alt="图片"><br>修改C:\Windows\System32\drivers\etc下的hosts文件，更改了服务器的配置文件，必须重启服务器，否则无法生效。<br>Windows底层文件被修改，提示权限不够，采用管理员模式启动。<br><img data-src="/images/19.jpg" alt="图片"><br><img data-src="/images/20.jpg" alt="图片"></h2><h3 id="3-2-4、修改应用存放目录"><a href="#3-2-4、修改应用存放目录" class="headerlink" title="3.2.4、修改应用存放目录"></a>3.2.4、修改应用存放目录</h3><h2 id=""><a href="#" class="headerlink" title=""></a><img data-src="/images/21.jpg" alt="图片"><br><img data-src="/images/22.jpg" alt="图片"></h2><h3 id="3-2-5、总结"><a href="#3-2-5、总结" class="headerlink" title="3.2.5、总结"></a>3.2.5、总结</h3><h2 id="可以配置启动的端口号1-Tomcat-的默认端口号为：80802-MySQL-的默认端口号为：33063-HTTP-的默认端口号为：804-HTTPS-的默认端口号为：443可以配置主机名称默认的主机名称：localhost–-gt-127-0-0-1默认的网站应用存放的位置为：webapps文件夹"><a href="#可以配置启动的端口号1-Tomcat-的默认端口号为：80802-MySQL-的默认端口号为：33063-HTTP-的默认端口号为：804-HTTPS-的默认端口号为：443可以配置主机名称默认的主机名称：localhost–-gt-127-0-0-1默认的网站应用存放的位置为：webapps文件夹" class="headerlink" title="可以配置启动的端口号1.Tomcat 的默认端口号为：80802.MySQL 的默认端口号为：33063.HTTP 的默认端口号为：804.HTTPS 的默认端口号为：443可以配置主机名称默认的主机名称：localhost–&gt;127.0.0.1默认的网站应用存放的位置为：webapps文件夹"></a>可以配置启动的端口号<br>1.Tomcat 的默认端口号为：8080<br>2.MySQL 的默认端口号为：3306<br>3.HTTP 的默认端口号为：80<br>4.HTTPS 的默认端口号为：443<br><img data-src="/images/23.jpg" alt="图片"><br>可以配置主机名称<br>默认的主机名称：localhost–&gt;127.0.0.1<br>默认的网站应用存放的位置为：webapps文件夹<br><img data-src="/images/24.jpg" alt="图片"></h2><h2 id="3-3、发布一个网站"><a href="#3-3、发布一个网站" class="headerlink" title="3.3、发布一个网站"></a>3.3、发布一个网站</h2><h2 id="不会就模仿"><a href="#不会就模仿" class="headerlink" title="不会就模仿"></a>不会就模仿<br><img data-src="/images/25.jpg" alt="图片"><br><img data-src="/images/26.jpg" alt="图片"></h2><h2 id="3-5、网站结构（也是约定）"><a href="#3-5、网站结构（也是约定）" class="headerlink" title="3.5、网站结构（也是约定）"></a>3.5、网站结构（也是约定）</h2><p>1.将自己写的网站，放到服务器（Tomcat）中指定的web应用程序的文件夹下，就可以访问了<br>2.网站应有的结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--webapps:Tomcat服务器的web目录</span><br><span class="line">    --ROOT</span><br><span class="line">    --qmei：网站的目录名</span><br><span class="line">    	--WEB-INF</span><br><span class="line">    		--classes ：java程序</span><br><span class="line">    		--lib：web应用所依赖的jar包</span><br><span class="line">    		--web.xml:网站配置文件</span><br><span class="line">        --index.html 默认的首页</span><br><span class="line">        --static 静态资源文件</span><br><span class="line">            --css</span><br><span class="line">            	--style.css</span><br><span class="line">            -js</span><br><span class="line">            --img</span><br><span class="line">        --...</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习之Http基础</title>
    <url>/2023/05/19/Http%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="1、HTTP"><a href="#1、HTTP" class="headerlink" title="1、HTTP"></a>1、HTTP</h1><h2 id="http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。·文本：html，字符串，-…·超文本：图片，音乐，视频，定位，地图…·80https：（s-安全的）·443"><a href="#http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。·文本：html，字符串，-…·超文本：图片，音乐，视频，定位，地图…·80https：（s-安全的）·443" class="headerlink" title="http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。·文本：html，字符串，-…·超文本：图片，音乐，视频，定位，地图…·80https：（s 安全的）·443"></a>http（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。<br>·文本：html，字符串，-…<br>·超文本：图片，音乐，视频，定位，地图…<br>·80<br>https：（s 安全的）<br>·443<span id="more"></span></h2><h2 id="1-2、两个时代"><a href="#1-2、两个时代" class="headerlink" title="1.2、两个时代"></a>1.2、两个时代</h2><h2 id="1-http1-0HTTP-x2F-1-0-：客户端可以与web服务器连接后，只能获得一个web资源，断开连接（烧流量）2-http2-0HTTP-x2F-1-1：客户端可以与web服务器连接后，可以获得多个web资源，不用每次请求连接"><a href="#1-http1-0HTTP-x2F-1-0-：客户端可以与web服务器连接后，只能获得一个web资源，断开连接（烧流量）2-http2-0HTTP-x2F-1-1：客户端可以与web服务器连接后，可以获得多个web资源，不用每次请求连接" class="headerlink" title="1.http1.0HTTP&#x2F;1.0 ：客户端可以与web服务器连接后，只能获得一个web资源，断开连接（烧流量）2.http2.0HTTP&#x2F;1.1：客户端可以与web服务器连接后，可以获得多个web资源，不用每次请求连接"></a>1.http1.0<br>HTTP&#x2F;1.0 ：客户端可以与web服务器连接后，只能获得一个web资源，断开连接（烧流量）<br>2.http2.0<br>HTTP&#x2F;1.1：客户端可以与web服务器连接后，可以获得多个web资源，不用每次请求连接</h2><h2 id="1-3、Http请求"><a href="#1-3、Http请求" class="headerlink" title="1.3、Http请求"></a>1.3、Http请求</h2><h2 id="客户端–发请求-Request-–服务器百度：General百度：Request-Headers1、请求行请求行中的请求方式：GET请求方式：Get，Post，HEAD，DELETE，PUT，TRACT…GET：一次请求可以携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效。POST：一次请求可以携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。2、消息头"><a href="#客户端–发请求-Request-–服务器百度：General百度：Request-Headers1、请求行请求行中的请求方式：GET请求方式：Get，Post，HEAD，DELETE，PUT，TRACT…GET：一次请求可以携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效。POST：一次请求可以携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。2、消息头" class="headerlink" title="客户端–发请求(Request)–服务器百度：General百度：Request Headers1、请求行请求行中的请求方式：GET请求方式：Get，Post，HEAD，DELETE，PUT，TRACT…GET：一次请求可以携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效。POST：一次请求可以携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。2、消息头"></a>客户端–发请求(Request)–服务器<br>百度：General<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Accept: text/html</span><br><span class="line">Request URL: https://www.baidu.com/  //请求地址</span><br><span class="line">Request Method: GET					//get方法，post方法</span><br><span class="line">Status Code: 200 OK					//状态码：200</span><br><span class="line">Remote Address: 14.215.177.38:443	//远端服务器地址</span><br></pre></td></tr></table></figure><br>百度：Request Headers<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Accept: text/html</span><br><span class="line">Accept-Encoding: gzip, deflate, br  //编码</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7 //语言</span><br><span class="line">Cache-Control: max-age=0    //缓存控制</span><br><span class="line">Connection: keep-alive		//保持连接</span><br></pre></td></tr></table></figure><br>1、请求行<br>请求行中的请求方式：GET<br>请求方式：Get，Post，HEAD，DELETE，PUT，TRACT…<br>GET：一次请求可以携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效。<br>POST：一次请求可以携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。<br>2、消息头<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Accept: //告诉服务器它所支持的数据类型</span><br><span class="line">Accept-Encoding: //支持哪种编码格式：GBK，UTF-8，GB2312，ISO8859-1</span><br><span class="line">Accept-Language: //告诉服务器它的语言环境</span><br><span class="line">Cache-Control: //缓存控制</span><br><span class="line">Connection: //告诉服务器，请求完成是断开还是保持连接</span><br><span class="line">HOST: //主机</span><br><span class="line">...</span><br></pre></td></tr></table></figure></h2><h2 id="1-4、Http响应"><a href="#1-4、Http响应" class="headerlink" title="1.4、Http响应"></a>1.4、Http响应</h2><p>服务器–响应–客户端<br>百度：General</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request URL: https://www.baidu.com/  //请求地址</span><br><span class="line">Request Method: GET					//get方法，post方法</span><br><span class="line">Status Code: 200 OK					//状态码：200</span><br><span class="line">Remote Address: 14.215.177.38:443	//远端服务器地址</span><br></pre></td></tr></table></figure>
<p>1.响应体<br>百度：Response Headers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cache-Control: private						//缓存控制</span><br><span class="line">Connection: keep-alive						//保持连接</span><br><span class="line">Content-Encoding: gzip						//编码</span><br><span class="line">Content-Type: text/html;charset=utf-8		//类型</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Accept: //告诉服务器它所支持的数据类型</span><br><span class="line">Accept-Encoding: //支持哪种编码格式：GBK，UTF-8，GB2312，ISO8859-1</span><br><span class="line">Accept-Language: //告诉服务器它的语言环境</span><br><span class="line">Cache-Control: //缓存控制</span><br><span class="line">Connection: //告诉服务器，请求完成是断开还是保持连接</span><br><span class="line">HOST: //主机</span><br><span class="line">Refresh://告诉客户端多久刷新一次</span><br><span class="line">Location：//让网页重新定位；</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>2，响应状态码<br>200：请求响应成功 200<br>3xx：请求重定向<br>重定向：你重新到我给你的新位置去找<br>4xx：找不到资源 404<br>资源不存在<br>5xx：服务器代码错误 500 502：网关错误</p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
